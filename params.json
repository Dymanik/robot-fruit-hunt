{"body":"\r\n# Welcome!\r\n\r\nSo you want to write a Haskell bot for the [Robot Fruit Hunt](http://www.scribd.com/jobs/botrace). You came to the right place!\r\n\r\nFirst, [read about how the game works](http://www.scribd.com/jobs/botrace_rules).\r\n\r\nThen, make sure you have followed the instructions in the [README](https://github.com/egonSchiele/robot-fruit-hunt) to set up your coding environment.\r\n\r\nNow, let's write our first bot.\r\n\r\n# Hello World\r\n\r\nHere's a Haskell bot that always goes EAST:\r\n\r\n```haskell\r\nmakeMove = return EAST\r\n```\r\n\r\n# A Smarter Bot\r\n\r\nHere's a bot that always goes to the nearest fruit:\r\n\r\n```haskell\r\nimport Data.Maybe\r\nimport Data.Ord (comparing)\r\nimport Data.List (sortBy)\r\n\r\n-- manhattan distance\r\ndist (x1, y1) (x2, y2) = (abs $ x2 - x1) + (abs $ y2 - y1)\r\n\r\n-- positions\r\nmyPos = (getMyX, getMyY)\r\noppPos = (getOpponentX, getOpponentY)\r\n\r\nfor = flip map\r\n\r\n-- get a list of all the positions with items\r\nallItems :: [(Int, Int)]\r\nallItems = catMaybes $ for positions $ \\(x, y) ->\r\n              if (isJust . hasItem $ getBoard !! x !! y)\r\n                then Just (x, y)\r\n                else Nothing\r\n \r\n-- all items, sorted by those closest to our bot\r\nnearestItems :: [(Int, Int)]\r\nnearestItems = sortBy (comparing $ dist myPos) allItems\r\n\r\nmoveTo :: (Int, Int) -> Move\r\nmoveTo (x, y)\r\n    | getMyX < x = EAST\r\n    | getMyX > x = WEST\r\n    | getMyY < y = SOUTH\r\n    | getMyY > y = NORTH\r\n    | otherwise  = TAKE\r\n\r\nmakeMove :: State (Map String String) Move\r\nmakeMove = return . moveTo . head $ nearestItems\r\n```\r\n\r\n# Debugging With Trace Statements\r\n\r\nYou can use the [trace](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Debug-Trace.html#v:trace) function for debugging.\r\nThe `trace` statement takes two values. It prints out the first and returns the second. Example:\r\n\r\n```haskell\r\nmakeMove = trace \"I'm moving!\" (return EAST)\r\n```\r\n\r\nYou can *only* use `trace` while testing locally. Output will be printed to the javascript console.\r\n\r\n# IO\r\n\r\nYou may have noticed that `makeMove` is a pure function. Your bot cannot do any IO. That includes `trace` functions and random number generators as well. When you submit your bot, make sure it doesn't do any IO!\r\n\r\n# State\r\n\r\nmakeMove uses the [State Monad](http://hackage.haskell.org/packages/archive/mtl/1.1.0.2/doc/html/Control-Monad-State-Lazy.html). In this case the state is a `Map` of Strings to Strings.\r\nYou can access the state with `get` and modify it with `put`. Here's a simple bot that keeps a counter of how many moves it's made:\r\n\r\n```haskell\r\nmakeMove = do\r\n  let key = \"move_num\"\r\n  state <- get\r\n  case lookup key state of\r\n    Just _ -> put $ adjust (\\num -> (read num :: Int) + 1) key state\r\n    Nothing -> put $ insert key (show 0) state\r\n  return EAST\r\n```\r\n\r\n# The Complete API\r\nThe complete API can be found [here](http://github.com/egonSchiele/robot-fruit-hunt/blob/master/haskell/HaskellAPI.markdown).\r\n\r\nHappy coding!","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-29851666-1","name":"Robot-fruit-hunt","tagline":"Writing a Haskell Bot for Scribd's fruit hunt"}